import org.apache.tools.ant.filters.*

plugins {
    id "com.github.johnrengelman.shadow" version "2.0.1"
    id "org.sonarqube" version "2.6.1"
    id "org.owasp.dependencycheck" version "3.3.1"
}

apply plugin: 'java-library'
apply plugin: 'maven'
apply plugin: 'maven-publish'
apply plugin: 'jacoco'

description = "payment-method-tsi"
group = 'com.payline'
version = '1.0-SNAPSHOT'

configurations.all {
    // afin de récupérer la dernière snapshot à chaque fois
    resolutionStrategy.cacheChangingModulesFor 0, 'seconds'
}

ext {
    paymentMethodApiVersion = '0.11-SNAPSHOT'
    paymentMethodIntegrationVersion = '0.11-SNAPSHOT'
    mockitoVersion = '2.19.0'
}
sourceCompatibility = 1.8

task printVersion {
    doLast {
        println version
    }
}

sonarqube {
    properties {
        property "sonar.jacoco.reportPaths", "${project.buildDir}/jacoco/test.exec"
        property "sonar.dependencyCheck.reportPath", "${project.buildDir}/reports/dependency-check-report.xml"
        property "sonar.dependencyCheck.htmlReportPath", "${project.buildDir}/reports/dependency-check-report.html"
    }
}

dependencyCheck {
    format 'ALL'
}

shadowJar {
    classifier = ''
    dependencies {
        exclude(dependency('com.payline:payment-method-api'))
        exclude(dependency('org.apache.logging.log4j:log4j-api'))
        exclude(dependency('org.apache.logging.log4j:log4j-core'))
    }
}

publishing {
    repositories {
        /* mavenLocal() */

        maven {
            if (project.version.endsWith('-SNAPSHOT')) {
                url "https://nexus.intra.monext.fr:10130/nexus/content/repositories/jindus-repo-pay-pay-snapshot/"
            } else {
                url "https://nexus.intra.monext.fr:10130/nexus/content/repositories/jindus-repo-pay-pay-public/"
            }
            credentials {
                username mavenUser
                password mavenPassword
            }
        }

    }
    publications {
        shadow(MavenPublication) { publication ->
            project.shadow.component(publication)
        }
    }
}

repositories {
    mavenLocal()
    /* mavenCentral() */

    maven {
        url "https://nexus.intra.monext.fr:10130/nexus/content/repositories/jindus-repo-pay-pay-public/"
        credentials {
            username mavenUser
            password mavenPassword
        }
    }
    maven {
        url "https://nexus.intra.monext.fr:10130/nexus/content/groups/public"
        credentials {
            username mavenUser
            password mavenPassword
        }
    }
    maven {
        url "https://nexus.intra.monext.fr:10130/nexus/content/repositories/jindus-repo-pay-pay-snapshot/"
        credentials {
            username mavenUser
            password mavenPassword
        }
    }

}


dependencies {
    compileOnly("com.payline:payment-method-api:$paymentMethodApiVersion")

    implementation group: 'org.apache.logging.log4j', name: 'log4j-api', version: '2.8.2'
    implementation group: 'com.google.code.gson', name: 'gson', version: '2.8.5'
    implementation group: 'com.squareup.okhttp3', name: 'okhttp', version: '3.11.0'

    testImplementation group: 'org.apache.logging.log4j', name: 'log4j-api', version: '2.8.2'
    testImplementation group: "junit", name: "junit", version: "4.12"
    testImplementation group: 'org.mockito', name: 'mockito-core', version: '2.21.0'
    testImplementation "com.payline:payment-method-api:${paymentMethodApiVersion}"
    testImplementation "com.payline:payment-method-integration:${paymentMethodIntegrationVersion}"
    testImplementation group: 'org.junit.jupiter', name: 'junit-jupiter-engine', version: '5.0.3'
    testImplementation group: 'org.seleniumhq.selenium', name: 'selenium-server', version: '3.13.0'
    testImplementation group: 'org.seleniumhq.selenium', name: 'selenium-support', version: '3.13.0'
}

assemble.dependsOn shadowJar

jar {
    manifest {
        attributes(
                'Implementation-Title': project.name,
                'Implementation-Version': project.version,
                'Built-By': System.getProperty('user.name'),
                'Built-JDK': System.getProperty('java.version'),
                'Build-Date': new Date().format("yyyy-MM-dd'T'HH:mm:ssZ"),
                'Source-Compatibility': project.sourceCompatibility,
                'Target-Compatibility': project.targetCompatibility
        )
    }
}

/* Replace tokens in resources files after compilation */
processResources {
    filesMatching('release.properties') {
        filter( ReplaceTokens, tokens:[
                'version': project.version.replace("-SNAPSHOT", ""),
                'date': new Date().format("dd/MM/yyyy")
        ])
    }
}

test.exclude '**/*IT.class'
